{"version":3,"file":"plugins.debug.development.js","sources":["../src/utils/insertElement.ts","../src/utils/padTime.ts","../src/utils/Error.ts"],"sourcesContent":["function insertElement(\n  tag: string,\n  attributes: { [key: string]: boolean | string } = {},\n  elementToInsertInto: HTMLElement,\n  html?: string,\n): HTMLElement {\n  const element: HTMLElement = document.createElement(tag);\n\n  Object.keys(attributes).forEach((key) => {\n    const value: boolean | string = attributes[key];\n\n    if (typeof value === 'boolean') {\n      if (!value) {\n        return;\n      }\n\n      element.setAttribute(key, key);\n      return;\n    }\n\n    element.setAttribute(key, value);\n  });\n\n  if (typeof html === 'string') {\n    element.innerHTML = html;\n  }\n\n  elementToInsertInto.appendChild(element);\n\n  return element;\n}\n\nexport default insertElement;\n","function padTime(time: number): string {\n  return String(time).padStart(2, '0');\n}\n\nexport default padTime;\n","type ValidErrorCode = 'Misconfiguration' | 'Invalid Parameters' | 'Malformed Request';\n\nclass Error extends Error {\n  public code: ValidErrorCode;\n  public message: string;\n\n  constructor(code: ValidErrorCode, message: string) {\n    super(message);\n    this.code = code;\n    this.message = message;\n  }\n}\n\nexport default Error;\n"],"names":[],"mappings":";;;;;AAAA;;;;;;;;;;;;;;;;;;;;ACAA;;;;ACEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}