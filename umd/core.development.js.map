{"version":3,"file":"core.development.js","sources":["../src/Events.ts","../src/utils/AdJsError.ts","../src/utils/insertElement.ts","../src/utils/seriallyResolvePromises.ts","../src/utils/uppercaseFirstLetter.ts","../src/utils/isServer.ts"],"sourcesContent":["// Event Bus Options\nenum Events {\n  CREATE = 'create',\n  REQUEST = 'request',\n  RENDER = 'render',\n  REFRESH = 'refresh',\n  DESTROY = 'destroy',\n  FREEZE = 'freeze',\n  UNFREEZE = 'unfreeze',\n  CLEAR = 'clear',\n}\n\nexport default Events;\n","type ValidErrorCode = 'Misconfiguration' | 'Invalid Parameters' | 'Malformed Request';\n\nclass AdJsError extends Error {\n  public code: ValidErrorCode;\n  public message: string;\n\n  constructor(code: ValidErrorCode, message: string) {\n    super(message);\n    this.code = code;\n    this.message = message;\n  }\n}\n\nexport default AdJsError;\n","function insertElement(\n  tag: string,\n  attributes: { [key: string]: boolean | string } = {},\n  elementToInsertInto: HTMLElement,\n  html?: string,\n): HTMLElement {\n  const element: HTMLElement = document.createElement(tag);\n\n  Object.keys(attributes).forEach((key) => {\n    const value: boolean | string = attributes[key];\n\n    if (typeof value === 'boolean') {\n      if (!value) {\n        return;\n      }\n\n      element.setAttribute(key, key);\n      return;\n    }\n\n    element.setAttribute(key, value);\n  });\n\n  if (typeof html === 'string') {\n    element.innerHTML = html;\n  }\n\n  elementToInsertInto.appendChild(element);\n\n  return element;\n}\n\nexport default insertElement;\n","const seriallyResolvePromises = (promises: Array<() => Promise<void>>): Promise<void> =>\n  promises.reduce(\n    (promiseChain: Promise<void>, fn: () => Promise<void>): Promise<void> => (\n      promiseChain.then(() => fn())\n    ),\n    Promise.resolve(),\n  );\n\nexport default seriallyResolvePromises;\n","function uppercaseFirstLetter(word: string): string {\n  return word.charAt(0).toUpperCase() + word.slice(1);\n}\n\nexport default uppercaseFirstLetter;\n","const isServer = (): boolean => typeof window === 'undefined';\n\nexport default isServer;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;ACEA;;;;;;;;ACFA;;;;;;;;;;;;;;;;;;;;ACAA;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}